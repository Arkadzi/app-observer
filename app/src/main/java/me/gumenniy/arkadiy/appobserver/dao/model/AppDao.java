package me.gumenniy.arkadiy.appobserver.dao.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import me.gumenniy.arkadiy.appobserver.dao.model.App;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP".
*/
public class AppDao extends AbstractDao<App, String> {

    public static final String TABLENAME = "APP";

    /**
     * Properties of entity App.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AppPackage = new Property(0, String.class, "appPackage", true, "APP_PACKAGE");
        public final static Property LastScanDate = new Property(1, java.util.Date.class, "lastScanDate", false, "LAST_SCAN_DATE");
    };


    public AppDao(DaoConfig config) {
        super(config);
    }
    
    public AppDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP\" (" + //
                "\"APP_PACKAGE\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: appPackage
                "\"LAST_SCAN_DATE\" INTEGER);"); // 1: lastScanDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, App entity) {
        stmt.clearBindings();
 
        String appPackage = entity.getAppPackage();
        if (appPackage != null) {
            stmt.bindString(1, appPackage);
        }
 
        java.util.Date lastScanDate = entity.getLastScanDate();
        if (lastScanDate != null) {
            stmt.bindLong(2, lastScanDate.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public App readEntity(Cursor cursor, int offset) {
        App entity = new App( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // appPackage
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)) // lastScanDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, App entity, int offset) {
        entity.setAppPackage(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLastScanDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(App entity, long rowId) {
        return entity.getAppPackage();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(App entity) {
        if(entity != null) {
            return entity.getAppPackage();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
